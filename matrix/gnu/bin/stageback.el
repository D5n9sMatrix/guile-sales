Debugger entered--Lisp error: (wrong-type-argument number-or-marker-p nil)
  #f(compiled-function (from to &rest rest) "Expand to a list of cell-symbols for the range going from\nFROM up to TO.  The range automatically expands to include any\nnew row or column inserted into its middle.  The SES library code\nspecifically looks for the symbol `ses-range', so don't create an\nalias for this macro!\n\nBy passing in REST some flags one can configure the way the range\nis read and how it is formatted.\n\nIn the sequel we assume that cells A1, B1, A2 B2 have respective values\n1 2 3 and 4.\n\nReadout direction is specified by a `>v', `>^', `<v', `<^',\n`v>', `v<', `^>', `^<' flag.  For historical reasons, in absence\nof such a flag, a default direction of `^<' is assumed.  This\nway `(ses-range A1 B2 ^>)' will evaluate to `(1 3 2 4)',\nwhile `(ses-range A1 B2 >^)' will evaluate to (3 4 1 2).\n\nIf the range is one row, then `>' can be used as a shorthand to\n`>v' or `>^', and `<' to `<v' or `<^'.\n\nIf the range is one column, then `v' can be used as a shorthand to\n`v>' or `v<', and `^' to `^>' or `v<'.\n\nA `!' flag will remove all cells whose value is nil or `*skip*'.\n\nA `_' flag will replace nil or `*skip*' by the value following\nthe `_' flag.  If the `_' flag is the last argument, then they are\nreplaced by integer 0.\n\nA `*', `*1' or `*2' flag will vectorize the range in the sense of\nCalc.  See info node `(Calc) Top'.  Flag `*' will output either a\nvector or a matrix depending on the number of rows, `*1' will\nflatten the result to a one row vector, and `*2' will make a\nmatrix whatever the number of rows.\n\nWarning: interaction with Calc is experimental and may produce\nconfusing results if you are not aware of Calc data format.\nUse `math-format-value' as a printer for Calc objects." #<bytecode 0xa0b2fd>)(12 14)
  (ses-range 12 14)
  (apply 'ses+ (ses-range 12 14))
  eval((apply 'ses+ (ses-range 12 14)) t)
  ielm-eval-input(#("(apply 'ses+ (ses-range 12 14)) " 0 32 (fontified t)) nil)
  ielm-send-input(nil)
  ielm-return()
  funcall-interactively(ielm-return)
  call-interactively(ielm-return nil nil)
  command-execute(ielm-return)
